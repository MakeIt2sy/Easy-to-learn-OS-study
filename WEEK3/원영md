# 스케줄링

> CPU 스케줄링은 어떤 작업에 CPU를 배정할지를 결정하는 것을 말한다.

<br />

## 고수준 스케줄링

고수준 스케줄링은 전체 시스템의 부하를 고려하여 가장 큰틀에서 작업을 시작할지 말지를 결정한다.

이 결정에 따라 시스템의 전체 프로세스 수가 결정되는데 이를 _멀티프로그래밍 정도_ 라고 한다.

<br />

## 중간 수준 스케줄링

중간 수준 스케줄링은 중지(suspend)와 활성화(active)로 전체 시스템의 활성화된 프로세스 수를 조절하여 과부하를 막는다.

<br />

## 저수준 스케줄링

어떤 프로세스에 CPU를 할당할지, 어떤 프로세스를 대기 상태로 보낼지 등을 결정한다.

<br />

## 스케줄링의 목적

- 공평성 : 모든 프로세스가 자원을 공평하게 배정받아야 한다.
- 효율성 : 시스템 자원이 유휴시간 없이 사용되도록 스케줄링을 하고, 유휴 자원을 사용하려는 프로세스에는 우선권을 준다.
- 안정성: 우선순위를 사용하여 중요 프로세스가 먼저 작동하도록 배정함으로써 시스템 자원을 점유하거나 파괴하려는 행위로부터 보호한다.
- 확장성: 프로세스가 증가해도 시스템이 안정적으로 작동하도록 해야 한다.
- 반응 시간 보장 : 시스템은 적절한 시간 안에 프로세스의 요구에 반응해야 한다.
- 무한 연기 방지 : 특정 프로세스의 작업이 무한히 연기되어서는 안된다.

<br />

## 선점형 스케줄링과 비선점형 스케줄링

- 선점형 스케줄링 : 어떤 프로세스가 CPU를 할당받아 실행 중이더라도 운영체제가 CPU를 강제로 빼앗을 수 있는 스케줄링 방식
- 비선점형 스케줄링 : 어떤 프로세스가 CPU를 점유하면 다른 프로세스가 이를 빼앗을 수 없는 스케줄링 방식

| 구분      | 선점형                                                               | 비선점형                                                      |
| --------- | -------------------------------------------------------------------- | ------------------------------------------------------------- |
| 작업 방식 | 실행 상테에 있는 작업을 중단하고 새로운 작업을 실행할 수 있다.       | 실행 상태에 있는 작업이 완료될 때까지 다른 작업이 불가능하다. |
| 장점      | 프로세스가 CPU를 독점할 수 없어 대화형이나 시분할 시스템에 적합하다. | CPU 스케줄러의 작업량이 적고 문맥 교환의 오버헤드가 적다.     |
| 단점      | 문맥 교환의 오버헤드가 많다.                                         | 기다리는 프로세스가 많아 처리율이 떨어진다.                   |
| 사용      | 시분할 방식 스케줄러에 사용된다.                                     | 일괄 작업 방식 스케줄러에 사용된다.                           |
| 중요도    | 높다.                                                                | 낮다.                                                         |

<br />

## 프로세스 우선순위

대부분의 CPU 스케줄러는 우선순위를 사용한다.

우선순위가 높다는건 더 빨리 더 자주 실행된다는 뜻

커널 프로세스 > 일반 프로세스

<br />

## CPU 집중 프로세스와 입출력 집중 프로세스

프로세스가 CPU를 할당 받아 실행하는 작접을 _CPU 버스트_, 입출력 작업을 _입출력 버스트_ 라고 한다.

- CPU 집중 프로세스 : 수학 연산과 같이 CPU를 많이 사용하는 프로세스를 말한다. -> CPU 버스트가 많은 프로세스
- 입출력 집중 프로세스 : 저장장치에서 데이터를 복사하는 일과 같이 입출력을 많이 사용하는 프로세스를 말한다 -> 입출력 버스트가 많은 프로세스

CPU 집중 프로세스보다 입출력 집중 프로세스를 먼저 실행상태로 옮기는 것이 효율적이다.

이런 경우를 사이클 훔치기 라고 한다.

<br />

## 전면 프로세스와 후면 프로세스

- 전면 프로세스 : GUI 를 사용하는 운영체제에서 화면에 맨 앞에 놓인 프로세스를 말한다. 현재 입/출력을 사용하는 프로세스이며, 사용자와 상호작용이 가능한 상호작용 프로세스라고도 한다.
- 후면 프로세스 : 사용자와 상호작용이 없는 프로세스이다. 사용자의 입력 없이 작동하기 때문에 일괄 작업 프로세스라고도 한다.

<br />

## 정리

| 우선순위 높음        | 우선순위 낮음      |
| -------------------- | ------------------ |
| 커널 프로세스        | 일반 프로세스      |
| 전면 프로세스        | 후면 프로세스      |
| 대화형 프로세스      | 일괄 처리 프로세스 |
| 입출력 집중 프로세스 | CPU 집중 프로세스  |

<br />
